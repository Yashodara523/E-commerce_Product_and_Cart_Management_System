{"ast":null,"code":"// src/redux/sagas.js\n\nimport { all, call, takeEvery, put } from 'redux-saga/effects';\nimport { FETCH_PRODUCTS_REQUEST, fetchProductsSuccess, fetchProductsFailure } from './actions';\nimport { fetchProducts } from '../api'; // Assuming you have a function to fetch products from an API\n\n// Individual saga for fetching products\nfunction* fetchProductsSaga() {\n  try {\n    const response = yield call(fetchProducts); // API call to fetch products\n    yield put(fetchProductsSuccess(response.data)); // Dispatch success action\n  } catch (error) {\n    yield put(fetchProductsFailure(error.message)); // Dispatch failure action\n  }\n}\n\n// Watcher saga to listen for the FETCH_PRODUCTS_REQUEST action\nfunction* watchFetchProducts() {\n  yield takeEvery(FETCH_PRODUCTS_REQUEST, fetchProductsSaga);\n}\n\n// Root saga to run all individual sagas in parallel\nexport default function* rootSaga() {\n  yield all([watchFetchProducts()]);\n}","map":{"version":3,"names":["all","call","takeEvery","put","FETCH_PRODUCTS_REQUEST","fetchProductsSuccess","fetchProductsFailure","fetchProducts","fetchProductsSaga","response","data","error","message","watchFetchProducts","rootSaga"],"sources":["C:/Users/user/Desktop/E-commerce_Product_and_Cart_Management_System/src/redux/sagas.js"],"sourcesContent":["// src/redux/sagas.js\r\n\r\nimport { all, call, takeEvery, put } from 'redux-saga/effects';\r\nimport { FETCH_PRODUCTS_REQUEST, fetchProductsSuccess, fetchProductsFailure } from './actions';\r\nimport { fetchProducts } from '../api';  // Assuming you have a function to fetch products from an API\r\n\r\n// Individual saga for fetching products\r\nfunction* fetchProductsSaga() {\r\n  try {\r\n    const response = yield call(fetchProducts);  // API call to fetch products\r\n    yield put(fetchProductsSuccess(response.data));  // Dispatch success action\r\n  } catch (error) {\r\n    yield put(fetchProductsFailure(error.message));  // Dispatch failure action\r\n  }\r\n}\r\n\r\n// Watcher saga to listen for the FETCH_PRODUCTS_REQUEST action\r\nfunction* watchFetchProducts() {\r\n  yield takeEvery(FETCH_PRODUCTS_REQUEST, fetchProductsSaga);\r\n}\r\n\r\n// Root saga to run all individual sagas in parallel\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchFetchProducts(),\r\n    \r\n  ]);\r\n}\r\n"],"mappings":"AAAA;;AAEA,SAASA,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,QAAQ,oBAAoB;AAC9D,SAASC,sBAAsB,EAAEC,oBAAoB,EAAEC,oBAAoB,QAAQ,WAAW;AAC9F,SAASC,aAAa,QAAQ,QAAQ,CAAC,CAAE;;AAEzC;AACA,UAAUC,iBAAiBA,CAAA,EAAG;EAC5B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,IAAI,CAACM,aAAa,CAAC,CAAC,CAAE;IAC7C,MAAMJ,GAAG,CAACE,oBAAoB,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE;EACnD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMR,GAAG,CAACG,oBAAoB,CAACK,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAE;EACnD;AACF;;AAEA;AACA,UAAUC,kBAAkBA,CAAA,EAAG;EAC7B,MAAMX,SAAS,CAACE,sBAAsB,EAAEI,iBAAiB,CAAC;AAC5D;;AAEA;AACA,eAAe,UAAUM,QAAQA,CAAA,EAAG;EAClC,MAAMd,GAAG,CAAC,CACRa,kBAAkB,CAAC,CAAC,CAErB,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}